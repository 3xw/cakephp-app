(self["webpackChunkcake_webpack"] = self["webpackChunkcake_webpack"] || []).push([[547,73],{

/***/ 768:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Lp": () => (/* binding */ client)
/* harmony export */ });
/* unused harmony exports parseResponse, parseResponseWithPaginate, parseTags */
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(600);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var Http = axios__WEBPACK_IMPORTED_MODULE_0___default().create({
  headers: {
    'X-CSRF-TOKEN': window.getCsrfToken(),
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  }
});

var client = /*#__PURE__*/function (_Http) {
  _inherits(client, _Http);

  var _super = _createSuper(client);

  function client() {
    _classCallCheck(this, client);

    return _super.apply(this, arguments);
  }

  return client;
}(Http);

var parseResponse = function parseResponse(response) {
  return {
    data: response.data.data // expecting object with ID

  };
},
    parseResponseWithPaginate = function parseResponseWithPaginate(response) {
  var data = response.data;
  return Object.assign({}, response, {
    data: data.data,
    // expecting array of objects with IDs
    pagination: data.pagination // expecting object with ID

  });
},
    parseTags = function parseTags(response) {
  var atagTypes = {};

  for (var i in response.data.data) {
    var atag = response.data.data[i];
    var type = atag.atag_type ? atag.atag_type : {
      id: 0,
      name: 'Autres',
      exclusive: false,
      order: 1000
    };
    if (!atagTypes[type.name]) atagTypes[type.name] = Object.assign({
      atags: []
    }, type);
    atagTypes[type.name].atags.push(atag);
  } // sort


  var keysSorted = Object.keys(atagTypes).sort(function (a, b) {
    return atagTypes[a].order - atagTypes[b].order;
  });
  var types = [];

  for (var _i in keysSorted) {
    types.push(atagTypes[keysSorted[_i]]);
  } // return tags


  return {
    data: types
  };
};



/***/ }),

/***/ 44:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => (/* binding */ List)
});

;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./vendor/3xw/cakephp-pages/resources/assets/components/List.vue?vue&type=template&id=563fd713&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c(
    "ul",
    { staticClass: "trois-pages-list" },
    [
      _c("pages-list-item", {
        staticClass: "trois-pages-list-item",
        attrs: { model: _vm.pages, url: _vm.url }
      })
    ],
    1
  )
}
var staticRenderFns = []
render._withStripped = true


;// CONCATENATED MODULE: ./vendor/3xw/cakephp-pages/resources/assets/components/List.vue?vue&type=template&id=563fd713&

// EXTERNAL MODULE: ./vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue + 4 modules
var ListItem = __webpack_require__(906);
;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./vendor/3xw/cakephp-pages/resources/assets/components/List.vue?vue&type=script&lang=js&
//
//
//
//
//

/* harmony default export */ const Listvue_type_script_lang_js_ = ({
  name: 'pages-list',
  components: {
    'pages-list-item': ListItem.default
  },
  props: {
    url: String
  },
  data: function data() {
    return {
      pages: {
        title: 'Pages',
        children: []
      }
    };
  },
  created: function created() {
    this.pages.children = this.unflatten(window.troisPagesList);
  },
  methods: {
    unflatten: function unflatten(arr) {
      var tree = [],
          mappedArr = {},
          arrElem,
          mappedElem; // First map the nodes of the array to an object -> create a hash table.

      for (var i = 0, len = arr.length; i < len; i++) {
        arrElem = arr[i];
        mappedArr[arrElem.id] = arrElem;
        mappedArr[arrElem.id]['children'] = [];
      }

      for (var id in mappedArr) {
        if (mappedArr.hasOwnProperty(id)) {
          mappedElem = mappedArr[id]; // If the element is not at the root level, add it to its parent array of children.

          if (mappedElem.parent_id) {
            mappedArr[mappedElem['parent_id']]['children'].push(mappedElem);
          } // If the element is at the root level, add it to first level elements array.
          else {
              tree.push(mappedElem);
            }
        }
      }

      return tree;
    }
  }
});
;// CONCATENATED MODULE: ./vendor/3xw/cakephp-pages/resources/assets/components/List.vue?vue&type=script&lang=js&
 /* harmony default export */ const components_Listvue_type_script_lang_js_ = (Listvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(900);
;// CONCATENATED MODULE: ./vendor/3xw/cakephp-pages/resources/assets/components/List.vue





/* normalize component */
;
var component = (0,componentNormalizer/* default */.Z)(
  components_Listvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "vendor/3xw/cakephp-pages/resources/assets/components/List.vue"
/* harmony default export */ const List = (component.exports);

/***/ }),

/***/ 906:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => (/* binding */ ListItem)
});

;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue?vue&type=template&id=65b53f46&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("li", [
    _c(
      "div",
      {
        class: { bold: _vm.isFolder },
        on: { click: _vm.toggle, dblclick: _vm.changeType }
      },
      [
        _vm.model.id
          ? _c("div", { staticClass: "trois-pages-list-item-title" }, [
              _c("div", { staticClass: "trois-pages-list-openener" }, [
                _vm.isFolder
                  ? _c("span", [
                      _vm.open
                        ? _c("i", { staticClass: "material-icons" }, [
                            _vm._v("expand_more")
                          ])
                        : _c("i", { staticClass: "material-icons" }, [
                            _vm._v("chevron_right")
                          ])
                    ])
                  : _vm._e()
              ]),
              _vm._v(" "),
              _c("i", { staticClass: "material-icons" }, [
                _vm._v("description")
              ]),
              _vm._v(" " + _vm._s(_vm.model.title) + "\n    ")
            ])
          : _vm._e(),
        _vm._v(" "),
        _c("div", { staticClass: "trois-pages-list-item-action" }, [
          _vm.model.id
            ? _c(
                "a",
                {
                  attrs: {
                    href: _vm.url + "admin/pages/Pages/manage/" + _vm.model.id
                  }
                },
                [
                  _c("i", { staticClass: "material-icons" }, [
                    _vm._v("mode_edit")
                  ])
                ]
              )
            : _vm._e(),
          _vm._v(" "),
          _vm.model.id
            ? _c(
                "a",
                {
                  attrs: {
                    href: _vm.url + "admin/pages/Pages/edit/" + _vm.model.id
                  }
                },
                [
                  _c("i", { staticClass: "material-icons" }, [
                    _vm._v("info_outline")
                  ])
                ]
              )
            : _vm._e(),
          _vm._v(" "),
          _vm.model.id
            ? _c("form", {
                staticStyle: { display: "inline-block" },
                attrs: {
                  id: "form-" + _vm.model.id,
                  action: _vm.url + "admin/pages/Pages/delete/" + _vm.model.id,
                  method: "post"
                }
              })
            : _vm._e(),
          _vm._v(" "),
          _vm.model.id
            ? _c(
                "i",
                {
                  staticClass: "material-icons",
                  on: { click: _vm.deleteItem }
                },
                [_vm._v("delete_forever")]
              )
            : _vm._e()
        ])
      ]
    ),
    _vm._v(" "),
    _vm.isFolder
      ? _c(
          "ul",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.open,
                expression: "open"
              }
            ]
          },
          _vm._l(_vm.model.children, function(model) {
            return _c("pages-list-item", {
              key: model.id,
              staticClass: "trois-pages-list-item",
              attrs: { model: model, url: _vm.url }
            })
          }),
          1
        )
      : _vm._e()
  ])
}
var staticRenderFns = []
render._withStripped = true


;// CONCATENATED MODULE: ./vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue?vue&type=template&id=65b53f46&

// EXTERNAL MODULE: ./vendor/3xw/cakephp-pages/resources/assets/http/client.js
var client = __webpack_require__(768);
;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ const ListItemvue_type_script_lang_js_ = ({
  name: 'pages-list-item',
  props: {
    model: Object,
    url: String
  },
  data: function data() {
    return {
      open: this.model.parent_id == undefined ? true : false
    };
  },
  computed: {
    isFolder: function isFolder() {
      return this.model.children && this.model.children.length;
    }
  },
  mounted: function mounted() {},
  methods: {
    deleteItem: function deleteItem() {
      if (confirm("Are you sure you want to delete '" + this.model.title + "' ?")) {
        document.getElementById('form-' + this.model.id).submit();
      }
    },
    toggle: function toggle() {
      if (this.isFolder) {
        this.open = !this.open;
      }
    },
    changeType: function changeType() {
      if (!this.isFolder) {
        Vue.set(this.model, 'children', []);
        this.addChild();
        this.open = true;
      }
    },
    addChild: function addChild() {
      this.model.children.push({
        title: 'new page'
      });
    }
    /*onDragEnd: function(evt){
      if(evt.oldIndex != evt.newIndex){
        this.swapChildren(evt.oldIndex, evt.newIndex);
      }
    },
    swapChildren: function(from, to)
    {
      var item = this.model.children.splice(from, 1 );
      this.model.children.splice((to < from)? to: to - 1, 0,  item[0]);
       // save
      client.post(this.url+'admin/pages/pages/order/'+item[0].id+'.json',
      {from:from,to:to,_csrfToken:window.getCsrfToken()},
      {headers:{"Accept":"application/json","Content-Type":"application/json"}})
      .then(this.editSuccessCallback, this.errorCallback);
    }*/

  }
});
;// CONCATENATED MODULE: ./vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue?vue&type=script&lang=js&
 /* harmony default export */ const components_ListItemvue_type_script_lang_js_ = (ListItemvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(900);
;// CONCATENATED MODULE: ./vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue





/* normalize component */
;
var component = (0,componentNormalizer/* default */.Z)(
  components_ListItemvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue"
/* harmony default export */ const ListItem = (component.exports);

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jYWtlLXdlYnBhY2svLi92ZW5kb3IvM3h3L2Nha2VwaHAtcGFnZXMvcmVzb3VyY2VzL2Fzc2V0cy9odHRwL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9jYWtlLXdlYnBhY2svLi92ZW5kb3IvM3h3L2Nha2VwaHAtcGFnZXMvcmVzb3VyY2VzL2Fzc2V0cy9jb21wb25lbnRzL0xpc3QudnVlPzQwMDUiLCJ3ZWJwYWNrOi8vY2FrZS13ZWJwYWNrL3ZlbmRvci8zeHcvY2FrZXBocC1wYWdlcy9yZXNvdXJjZXMvYXNzZXRzL2NvbXBvbmVudHMvTGlzdC52dWUiLCJ3ZWJwYWNrOi8vY2FrZS13ZWJwYWNrLy4vdmVuZG9yLzN4dy9jYWtlcGhwLXBhZ2VzL3Jlc291cmNlcy9hc3NldHMvY29tcG9uZW50cy9MaXN0LnZ1ZT83ZGZhIiwid2VicGFjazovL2Nha2Utd2VicGFjay8uL3ZlbmRvci8zeHcvY2FrZXBocC1wYWdlcy9yZXNvdXJjZXMvYXNzZXRzL2NvbXBvbmVudHMvTGlzdC52dWUiLCJ3ZWJwYWNrOi8vY2FrZS13ZWJwYWNrLy4vdmVuZG9yLzN4dy9jYWtlcGhwLXBhZ2VzL3Jlc291cmNlcy9hc3NldHMvY29tcG9uZW50cy9MaXN0SXRlbS52dWU/ZTRjMiIsIndlYnBhY2s6Ly9jYWtlLXdlYnBhY2svdmVuZG9yLzN4dy9jYWtlcGhwLXBhZ2VzL3Jlc291cmNlcy9hc3NldHMvY29tcG9uZW50cy9MaXN0SXRlbS52dWUiLCJ3ZWJwYWNrOi8vY2FrZS13ZWJwYWNrLy4vdmVuZG9yLzN4dy9jYWtlcGhwLXBhZ2VzL3Jlc291cmNlcy9hc3NldHMvY29tcG9uZW50cy9MaXN0SXRlbS52dWU/NGMxZiIsIndlYnBhY2s6Ly9jYWtlLXdlYnBhY2svLi92ZW5kb3IvM3h3L2Nha2VwaHAtcGFnZXMvcmVzb3VyY2VzL2Fzc2V0cy9jb21wb25lbnRzL0xpc3RJdGVtLnZ1ZSJdLCJuYW1lcyI6WyJIdHRwIiwiYXhpb3MiLCJoZWFkZXJzIiwid2luZG93IiwiZ2V0Q3NyZlRva2VuIiwiY2xpZW50IiwicGFyc2VSZXNwb25zZSIsInJlc3BvbnNlIiwiZGF0YSIsInBhcnNlUmVzcG9uc2VXaXRoUGFnaW5hdGUiLCJPYmplY3QiLCJhc3NpZ24iLCJwYWdpbmF0aW9uIiwicGFyc2VUYWdzIiwiYXRhZ1R5cGVzIiwiaSIsImF0YWciLCJ0eXBlIiwiYXRhZ190eXBlIiwiaWQiLCJuYW1lIiwiZXhjbHVzaXZlIiwib3JkZXIiLCJhdGFncyIsInB1c2giLCJrZXlzU29ydGVkIiwia2V5cyIsInNvcnQiLCJhIiwiYiIsInR5cGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUVBLElBQ0FBLElBQUksR0FBR0MsbURBQUEsQ0FBYTtBQUNsQkMsU0FBTyxFQUFFO0FBQ1Asb0JBQW9CQyxNQUFNLENBQUNDLFlBQVAsRUFEYjtBQUVQLGNBQVUsa0JBRkg7QUFHUCxvQkFBZ0I7QUFIVDtBQURTLENBQWIsQ0FEUDs7SUFTTUMsTTs7Ozs7Ozs7Ozs7O0VBQWVMLEk7O0FBRXJCLElBQ0FNLGFBQWEsR0FBRyxTQUFoQkEsYUFBZ0IsQ0FBU0MsUUFBVCxFQUNoQjtBQUNFLFNBQU87QUFDTEMsUUFBSSxFQUFFRCxRQUFRLENBQUNDLElBQVQsQ0FBY0EsSUFEZixDQUNtQjs7QUFEbkIsR0FBUDtBQUdELENBTkQ7QUFBQSxJQU9BQyx5QkFBeUIsR0FBRyxTQUE1QkEseUJBQTRCLENBQVNGLFFBQVQsRUFDNUI7QUFBQSxNQUNVQyxJQURWLEdBQ21CRCxRQURuQixDQUNVQyxJQURWO0FBR0UsU0FBT0UsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQkosUUFBbEIsRUFBNEI7QUFDakNDLFFBQUksRUFBRUEsSUFBSSxDQUFDQSxJQURzQjtBQUNoQjtBQUNqQkksY0FBVSxFQUFFSixJQUFJLENBQUNJLFVBRmdCLENBRU47O0FBRk0sR0FBNUIsQ0FBUDtBQUlELENBZkQ7QUFBQSxJQWdCQUMsU0FBUyxHQUFHLFNBQVpBLFNBQVksQ0FBU04sUUFB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WEE7QUFpQkEsK0JBRUEsQ0FuQkE7QUFvQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBTEE7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBVkE7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQWpCQTtBQWtCQTtBQUNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBckNBO0FBcEJBLENBREEsRTs7QUNoRGlPLENBQUMsa0ZBQWUsZ0NBQUcsRUFBQyxDOzs7O0FDQTlKO0FBQzNCO0FBQ0w7OztBQUd2RDtBQUNBLENBQXNHO0FBQ3RHLGdCQUFnQixzQ0FBVTtBQUMxQixFQUFFLDJDQUFNO0FBQ1IsRUFBRSxNQUFNO0FBQ1IsRUFBRSxlQUFlO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsSUFBSSxLQUFVLEVBQUUsWUFpQmY7QUFDRDtBQUNBLCtDQUFlLGlCIiwiZmlsZSI6ImpzL3BhZ2VzL2NvbXBvbmVudHMvZGZhZmEyMzQ2ZjdiMDI1YWI5ZGMuTGlzdC12dWUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJ1xuXG5jb25zdFxuSHR0cCA9IGF4aW9zLmNyZWF0ZSh7XG4gIGhlYWRlcnM6IHtcbiAgICAnWC1DU1JGLVRPS0VOJyAgICA6IHdpbmRvdy5nZXRDc3JmVG9rZW4oKSxcbiAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgfVxufSlcblxuY2xhc3MgY2xpZW50IGV4dGVuZHMgSHR0cCB7fVxuXG5jb25zdFxucGFyc2VSZXNwb25zZSA9IGZ1bmN0aW9uKHJlc3BvbnNlKVxue1xuICByZXR1cm4ge1xuICAgIGRhdGE6IHJlc3BvbnNlLmRhdGEuZGF0YS8vIGV4cGVjdGluZyBvYmplY3Qgd2l0aCBJRFxuICB9XG59LFxucGFyc2VSZXNwb25zZVdpdGhQYWdpbmF0ZSA9IGZ1bmN0aW9uKHJlc3BvbnNlKVxue1xuICBjb25zdCB7IGRhdGEgfSA9IHJlc3BvbnNlO1xuXG4gIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCByZXNwb25zZSwge1xuICAgIGRhdGE6IGRhdGEuZGF0YSwgLy8gZXhwZWN0aW5nIGFycmF5IG9mIG9iamVjdHMgd2l0aCBJRHNcbiAgICBwYWdpbmF0aW9uOiBkYXRhLnBhZ2luYXRpb24vLyBleHBlY3Rpbmcgb2JqZWN0IHdpdGggSURcbiAgfSk7XG59LFxucGFyc2VUYWdzID0gZnVuY3Rpb24ocmVzcG9uc2UpXG57XG4gIGxldCBhdGFnVHlwZXMgPSB7fVxuICBmb3IobGV0IGkgaW4gcmVzcG9uc2UuZGF0YS5kYXRhKVxuICB7XG4gICAgbGV0IGF0YWcgPSByZXNwb25zZS5kYXRhLmRhdGFbaV1cbiAgICBsZXQgdHlwZSA9IGF0YWcuYXRhZ190eXBlPyBhdGFnLmF0YWdfdHlwZToge1xuICAgICAgaWQ6IDAsXG4gICAgICBuYW1lOiAnQXV0cmVzJyxcbiAgICAgIGV4Y2x1c2l2ZTogZmFsc2UsXG4gICAgICBvcmRlcjogMTAwMFxuICAgIH1cblxuICAgIGlmKCFhdGFnVHlwZXNbdHlwZS5uYW1lXSkgYXRhZ1R5cGVzW3R5cGUubmFtZV0gPSBPYmplY3QuYXNzaWduKHthdGFnczogW119LCB0eXBlKVxuICAgIGF0YWdUeXBlc1t0eXBlLm5hbWVdLmF0YWdzLnB1c2goYXRhZylcbiAgfVxuXG4gIC8vIHNvcnRcbiAgbGV0IGtleXNTb3J0ZWQgPSBPYmplY3Qua2V5cyhhdGFnVHlwZXMpLnNvcnQoZnVuY3Rpb24oYSxiKXtyZXR1cm4gYXRhZ1R5cGVzW2FdLm9yZGVyLWF0YWdUeXBlc1tiXS5vcmRlcn0pXG4gIGxldCB0eXBlcyA9IFtdXG4gIGZvcihsZXQgaSBpbiBrZXlzU29ydGVkKSB0eXBlcy5wdXNoKGF0YWdUeXBlc1trZXlzU29ydGVkW2ldXSlcblxuICAvLyByZXR1cm4gdGFnc1xuICByZXR1cm4ge2RhdGE6IHR5cGVzfVxufVxuXG5leHBvcnQgeyBjbGllbnQsIHBhcnNlUmVzcG9uc2UsIHBhcnNlUmVzcG9uc2VXaXRoUGFnaW5hdGUsIHBhcnNlVGFncyB9XG4iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwidWxcIixcbiAgICB7IHN0YXRpY0NsYXNzOiBcInRyb2lzLXBhZ2VzLWxpc3RcIiB9LFxuICAgIFtcbiAgICAgIF9jKFwicGFnZXMtbGlzdC1pdGVtXCIsIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwidHJvaXMtcGFnZXMtbGlzdC1pdGVtXCIsXG4gICAgICAgIGF0dHJzOiB7IG1vZGVsOiBfdm0ucGFnZXMsIHVybDogX3ZtLnVybCB9XG4gICAgICB9KVxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxuICA8dWwgY2xhc3M9XCJ0cm9pcy1wYWdlcy1saXN0XCI+XG4gICAgPHBhZ2VzLWxpc3QtaXRlbSBjbGFzcz1cInRyb2lzLXBhZ2VzLWxpc3QtaXRlbVwiIDptb2RlbD1cInBhZ2VzXCIgOnVybD1cInVybFwiPjwvcGFnZXMtbGlzdC1pdGVtPlxuICA8L3VsPlxuPC90ZW1wbGF0ZT5cbjxzY3JpcHQ+XG5pbXBvcnQgTGlzdEl0ZW0gZnJvbSAnLi9MaXN0SXRlbS52dWUnXG5leHBvcnQgZGVmYXVsdCB7XG4gIG5hbWU6ICdwYWdlcy1saXN0JyxcbiAgY29tcG9uZW50czoge1xuICAgICdwYWdlcy1saXN0LWl0ZW0nOiBMaXN0SXRlbVxuICB9LFxuICBwcm9wczoge1xuICAgIHVybDpTdHJpbmdcbiAgfSxcbiAgZGF0YTogZnVuY3Rpb24oKXtcbiAgICByZXR1cm4ge1xuICAgICAgcGFnZXM6IHtcbiAgICAgICAgdGl0bGU6ICdQYWdlcycsXG4gICAgICAgIGNoaWxkcmVuOiBbXVxuICAgICAgfSxcbiAgICB9XG4gIH0sXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uKCl7XG4gICAgdGhpcy5wYWdlcy5jaGlsZHJlbiA9IHRoaXMudW5mbGF0dGVuKHdpbmRvdy50cm9pc1BhZ2VzTGlzdCk7XG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICB1bmZsYXR0ZW46IGZ1bmN0aW9uKGFycikge1xuICAgICAgdmFyIHRyZWUgPSBbXSxcbiAgICAgIG1hcHBlZEFyciA9IHt9LFxuICAgICAgYXJyRWxlbSxcbiAgICAgIG1hcHBlZEVsZW07XG5cbiAgICAgIC8vIEZpcnN0IG1hcCB0aGUgbm9kZXMgb2YgdGhlIGFycmF5IHRvIGFuIG9iamVjdCAtPiBjcmVhdGUgYSBoYXNoIHRhYmxlLlxuICAgICAgZm9yKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGFyckVsZW0gPSBhcnJbaV07XG4gICAgICAgIG1hcHBlZEFyclthcnJFbGVtLmlkXSA9IGFyckVsZW07XG4gICAgICAgIG1hcHBlZEFyclthcnJFbGVtLmlkXVsnY2hpbGRyZW4nXSA9IFtdO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpZCBpbiBtYXBwZWRBcnIpIHtcbiAgICAgICAgaWYgKG1hcHBlZEFyci5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcbiAgICAgICAgICBtYXBwZWRFbGVtID0gbWFwcGVkQXJyW2lkXTtcbiAgICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBub3QgYXQgdGhlIHJvb3QgbGV2ZWwsIGFkZCBpdCB0byBpdHMgcGFyZW50IGFycmF5IG9mIGNoaWxkcmVuLlxuICAgICAgICAgIGlmIChtYXBwZWRFbGVtLnBhcmVudF9pZCkge1xuICAgICAgICAgICAgbWFwcGVkQXJyW21hcHBlZEVsZW1bJ3BhcmVudF9pZCddXVsnY2hpbGRyZW4nXS5wdXNoKG1hcHBlZEVsZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBJZiB0aGUgZWxlbWVudCBpcyBhdCB0aGUgcm9vdCBsZXZlbCwgYWRkIGl0IHRvIGZpcnN0IGxldmVsIGVsZW1lbnRzIGFycmF5LlxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJlZS5wdXNoKG1hcHBlZEVsZW0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRyZWU7XG4gICAgfVxuICB9XG59XG48L3NjcmlwdD5cbiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMVswXS5ydWxlc1swXS51c2UhLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9MaXN0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xpc3QudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9MaXN0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NjNmZDcxMyZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9MaXN0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vTGlzdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBudWxsLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIi9Vc2Vycy9hbnRvaW5lL1NpdGVzL2Nha2VwaHAtYXBwL25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzU2M2ZkNzEzJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzU2M2ZkNzEzJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzU2M2ZkNzEzJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9MaXN0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD01NjNmZDcxMyZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCc1NjNmZDcxMycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwidmVuZG9yLzN4dy9jYWtlcGhwLXBhZ2VzL3Jlc291cmNlcy9hc3NldHMvY29tcG9uZW50cy9MaXN0LnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJsaVwiLCBbXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAge1xuICAgICAgICBjbGFzczogeyBib2xkOiBfdm0uaXNGb2xkZXIgfSxcbiAgICAgICAgb246IHsgY2xpY2s6IF92bS50b2dnbGUsIGRibGNsaWNrOiBfdm0uY2hhbmdlVHlwZSB9XG4gICAgICB9LFxuICAgICAgW1xuICAgICAgICBfdm0ubW9kZWwuaWRcbiAgICAgICAgICA/IF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidHJvaXMtcGFnZXMtbGlzdC1pdGVtLXRpdGxlXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInRyb2lzLXBhZ2VzLWxpc3Qtb3BlbmVuZXJcIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLmlzRm9sZGVyXG4gICAgICAgICAgICAgICAgICA/IF9jKFwic3BhblwiLCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLm9wZW5cbiAgICAgICAgICAgICAgICAgICAgICAgID8gX2MoXCJpXCIsIHsgc3RhdGljQ2xhc3M6IFwibWF0ZXJpYWwtaWNvbnNcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiZXhwYW5kX21vcmVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogX2MoXCJpXCIsIHsgc3RhdGljQ2xhc3M6IFwibWF0ZXJpYWwtaWNvbnNcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiY2hldnJvbl9yaWdodFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJpXCIsIHsgc3RhdGljQ2xhc3M6IFwibWF0ZXJpYWwtaWNvbnNcIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiZGVzY3JpcHRpb25cIilcbiAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiArIF92bS5fcyhfdm0ubW9kZWwudGl0bGUpICsgXCJcXG4gICAgXCIpXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidHJvaXMtcGFnZXMtbGlzdC1pdGVtLWFjdGlvblwiIH0sIFtcbiAgICAgICAgICBfdm0ubW9kZWwuaWRcbiAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgXCJhXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgaHJlZjogX3ZtLnVybCArIFwiYWRtaW4vcGFnZXMvUGFnZXMvbWFuYWdlL1wiICsgX3ZtLm1vZGVsLmlkXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBfYyhcImlcIiwgeyBzdGF0aWNDbGFzczogXCJtYXRlcmlhbC1pY29uc1wiIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwibW9kZV9lZGl0XCIpXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF92bS5tb2RlbC5pZFxuICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICBcImFcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgICBocmVmOiBfdm0udXJsICsgXCJhZG1pbi9wYWdlcy9QYWdlcy9lZGl0L1wiICsgX3ZtLm1vZGVsLmlkXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICBfYyhcImlcIiwgeyBzdGF0aWNDbGFzczogXCJtYXRlcmlhbC1pY29uc1wiIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiaW5mb19vdXRsaW5lXCIpXG4gICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF92bS5tb2RlbC5pZFxuICAgICAgICAgICAgPyBfYyhcImZvcm1cIiwge1xuICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7IGRpc3BsYXk6IFwiaW5saW5lLWJsb2NrXCIgfSxcbiAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgaWQ6IFwiZm9ybS1cIiArIF92bS5tb2RlbC5pZCxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbjogX3ZtLnVybCArIFwiYWRtaW4vcGFnZXMvUGFnZXMvZGVsZXRlL1wiICsgX3ZtLm1vZGVsLmlkLFxuICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcInBvc3RcIlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIDogX3ZtLl9lKCksXG4gICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICBfdm0ubW9kZWwuaWRcbiAgICAgICAgICAgID8gX2MoXG4gICAgICAgICAgICAgICAgXCJpXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwibWF0ZXJpYWwtaWNvbnNcIixcbiAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uZGVsZXRlSXRlbSB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl92KFwiZGVsZXRlX2ZvcmV2ZXJcIildXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogX3ZtLl9lKClcbiAgICAgICAgXSlcbiAgICAgIF1cbiAgICApLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX3ZtLmlzRm9sZGVyXG4gICAgICA/IF9jKFxuICAgICAgICAgIFwidWxcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInNob3dcIixcbiAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtc2hvd1wiLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ub3BlbixcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcIm9wZW5cIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgICAgfSxcbiAgICAgICAgICBfdm0uX2woX3ZtLm1vZGVsLmNoaWxkcmVuLCBmdW5jdGlvbihtb2RlbCkge1xuICAgICAgICAgICAgcmV0dXJuIF9jKFwicGFnZXMtbGlzdC1pdGVtXCIsIHtcbiAgICAgICAgICAgICAga2V5OiBtb2RlbC5pZCxcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwidHJvaXMtcGFnZXMtbGlzdC1pdGVtXCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7IG1vZGVsOiBtb2RlbCwgdXJsOiBfdm0udXJsIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSksXG4gICAgICAgICAgMVxuICAgICAgICApXG4gICAgICA6IF92bS5fZSgpXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxuICA8bGk+XG4gICAgPGRpdlxuICAgICAgOmNsYXNzPVwie2JvbGQ6IGlzRm9sZGVyfVwiXG4gICAgICBAY2xpY2s9XCJ0b2dnbGVcIlxuICAgICAgQGRibGNsaWNrPVwiY2hhbmdlVHlwZVwiPlxuXG4gICAgICA8ZGl2IHYtaWY9XCJtb2RlbC5pZFwiIGNsYXNzPVwidHJvaXMtcGFnZXMtbGlzdC1pdGVtLXRpdGxlXCI+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0cm9pcy1wYWdlcy1saXN0LW9wZW5lbmVyXCI+XG4gICAgICAgICAgPHNwYW4gdi1pZj1cImlzRm9sZGVyXCI+XG4gICAgICAgICAgICA8aSB2LWlmPVwib3BlblwiIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnNcIj5leHBhbmRfbW9yZTwvaT5cbiAgICAgICAgICAgIDxpIHYtZWxzZSBjbGFzcz1cIm1hdGVyaWFsLWljb25zXCI+Y2hldnJvbl9yaWdodDwvaT5cbiAgICAgICAgICA8L3NwYW4+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8aSBjbGFzcz1cIm1hdGVyaWFsLWljb25zXCI+ZGVzY3JpcHRpb248L2k+IHt7bW9kZWwudGl0bGV9fVxuICAgICAgPC9kaXY+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0cm9pcy1wYWdlcy1saXN0LWl0ZW0tYWN0aW9uXCI+XG4gICAgICAgIDwhLS0gTUFOQUdFIFBBR0UgQ09OVEVOVCAtLT5cbiAgICAgICAgPGEgdi1pZj1cIm1vZGVsLmlkXCIgOmhyZWY9XCJ1cmwrJ2FkbWluL3BhZ2VzL1BhZ2VzL21hbmFnZS8nK21vZGVsLmlkXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJtYXRlcmlhbC1pY29uc1wiPm1vZGVfZWRpdDwvaT5cbiAgICAgICAgPC9hPlxuXG4gICAgICAgIDwhLS0gRURJVCBQQUdFIC0tPlxuICAgICAgICA8YSB2LWlmPVwibW9kZWwuaWRcIiA6aHJlZj1cInVybCsnYWRtaW4vcGFnZXMvUGFnZXMvZWRpdC8nK21vZGVsLmlkXCI+XG4gICAgICAgICAgPGkgY2xhc3M9XCJtYXRlcmlhbC1pY29uc1wiPmluZm9fb3V0bGluZTwvaT5cbiAgICAgICAgPC9hPlxuXG4gICAgICAgIDwhLS0gREVMRVRFIC0tPlxuICAgICAgICA8Zm9ybSB2LWlmPVwibW9kZWwuaWRcIiBzdHlsZT1cImRpc3BsYXk6aW5saW5lLWJsb2NrO1wiIDppZD1cIidmb3JtLScrbW9kZWwuaWRcIiA6YWN0aW9uPVwidXJsKydhZG1pbi9wYWdlcy9QYWdlcy9kZWxldGUvJyttb2RlbC5pZFwiIG1ldGhvZD1cInBvc3RcIj48L2Zvcm0+XG4gICAgICAgIDxpIHYtaWY9XCJtb2RlbC5pZFwiIGNsYXNzPVwibWF0ZXJpYWwtaWNvbnNcIiBAY2xpY2s9XCJkZWxldGVJdGVtXCI+ZGVsZXRlX2ZvcmV2ZXI8L2k+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8dWwgdi1zaG93PVwib3BlblwiIHYtaWY9XCJpc0ZvbGRlclwiID5cbiAgICAgIDxwYWdlcy1saXN0LWl0ZW1cbiAgICAgICAgY2xhc3M9XCJ0cm9pcy1wYWdlcy1saXN0LWl0ZW1cIlxuICAgICAgICB2LWZvcj1cIm1vZGVsIGluIG1vZGVsLmNoaWxkcmVuXCJcbiAgICAgICAgOmtleT1cIm1vZGVsLmlkXCJcbiAgICAgICAgOm1vZGVsPVwibW9kZWxcIlxuICAgICAgICA6dXJsPVwidXJsXCI+XG4gICAgICA8L3BhZ2VzLWxpc3QtaXRlbT5cbiAgICA8L3VsPlxuICA8L2xpPlxuPC90ZW1wbGF0ZT5cblxuPHNjcmlwdD5cbmltcG9ydCB7IGNsaWVudCB9IGZyb20gJ0AvaHR0cC9jbGllbnQuanMnXG5cbmV4cG9ydCBkZWZhdWx0XG57XG4gIG5hbWU6ICdwYWdlcy1saXN0LWl0ZW0nLFxuICBwcm9wczoge1xuICAgIG1vZGVsOiBPYmplY3QsXG4gICAgdXJsOlN0cmluZ1xuICB9LFxuICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG9wZW46ICh0aGlzLm1vZGVsLnBhcmVudF9pZCA9PSB1bmRlZmluZWQpID8gdHJ1ZSA6IGZhbHNlXG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIGlzRm9sZGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tb2RlbC5jaGlsZHJlbiAmJlxuICAgICAgICB0aGlzLm1vZGVsLmNoaWxkcmVuLmxlbmd0aFxuICAgIH1cbiAgfSxcbiAgbW91bnRlZDogZnVuY3Rpb24gKCkge1xuXG4gIH0sXG4gIG1ldGhvZHM6IHtcbiAgICBkZWxldGVJdGVtOiBmdW5jdGlvbigpe1xuICAgICAgaWYgKGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlICdcIit0aGlzLm1vZGVsLnRpdGxlK1wiJyA/XCIpKXtcbiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2Zvcm0tJyt0aGlzLm1vZGVsLmlkKS5zdWJtaXQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRvZ2dsZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuaXNGb2xkZXIpIHtcbiAgICAgICAgdGhpcy5vcGVuID0gIXRoaXMub3BlblxuICAgICAgfVxuICAgIH0sXG4gICAgY2hhbmdlVHlwZTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKCF0aGlzLmlzRm9sZGVyKSB7XG4gICAgICAgIFZ1ZS5zZXQodGhpcy5tb2RlbCwgJ2NoaWxkcmVuJywgW10pXG4gICAgICAgIHRoaXMuYWRkQ2hpbGQoKVxuICAgICAgICB0aGlzLm9wZW4gPSB0cnVlXG4gICAgICB9XG4gICAgfSxcbiAgICBhZGRDaGlsZDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5tb2RlbC5jaGlsZHJlbi5wdXNoKHtcbiAgICAgICAgdGl0bGU6ICduZXcgcGFnZSdcbiAgICAgIH0pXG4gICAgfSxcbiAgICAvKm9uRHJhZ0VuZDogZnVuY3Rpb24oZXZ0KXtcbiAgICAgIGlmKGV2dC5vbGRJbmRleCAhPSBldnQubmV3SW5kZXgpe1xuICAgICAgICB0aGlzLnN3YXBDaGlsZHJlbihldnQub2xkSW5kZXgsIGV2dC5uZXdJbmRleCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBzd2FwQ2hpbGRyZW46IGZ1bmN0aW9uKGZyb20sIHRvKVxuICAgIHtcbiAgICAgIHZhciBpdGVtID0gdGhpcy5tb2RlbC5jaGlsZHJlbi5zcGxpY2UoZnJvbSwgMSApO1xuICAgICAgdGhpcy5tb2RlbC5jaGlsZHJlbi5zcGxpY2UoKHRvIDwgZnJvbSk/IHRvOiB0byAtIDEsIDAsICBpdGVtWzBdKTtcblxuICAgICAgLy8gc2F2ZVxuICAgICAgY2xpZW50LnBvc3QodGhpcy51cmwrJ2FkbWluL3BhZ2VzL3BhZ2VzL29yZGVyLycraXRlbVswXS5pZCsnLmpzb24nLFxuICAgICAge2Zyb206ZnJvbSx0bzp0byxfY3NyZlRva2VuOndpbmRvdy5nZXRDc3JmVG9rZW4oKX0sXG4gICAgICB7aGVhZGVyczp7XCJBY2NlcHRcIjpcImFwcGxpY2F0aW9uL2pzb25cIixcIkNvbnRlbnQtVHlwZVwiOlwiYXBwbGljYXRpb24vanNvblwifX0pXG4gICAgICAudGhlbih0aGlzLmVkaXRTdWNjZXNzQ2FsbGJhY2ssIHRoaXMuZXJyb3JDYWxsYmFjayk7XG4gICAgfSovXG4gIH1cbn1cbjwvc2NyaXB0PlxuIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xpc3RJdGVtLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xWzBdLnJ1bGVzWzBdLnVzZSEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0xpc3RJdGVtLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTGlzdEl0ZW0udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY1YjUzZjQ2JlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL0xpc3RJdGVtLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vTGlzdEl0ZW0udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgbnVsbCxcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvYW50b2luZS9TaXRlcy9jYWtlcGhwLWFwcC9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCc2NWI1M2Y0NicpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc2NWI1M2Y0NicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc2NWI1M2Y0NicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vTGlzdEl0ZW0udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY1YjUzZjQ2JlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzY1YjUzZjQ2Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJ2ZW5kb3IvM3h3L2Nha2VwaHAtcGFnZXMvcmVzb3VyY2VzL2Fzc2V0cy9jb21wb25lbnRzL0xpc3RJdGVtLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=