(self["webpackChunkcake_webpack"] = self["webpackChunkcake_webpack"] || []).push([[73],{

/***/ 768:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Lp": () => (/* binding */ client)
/* harmony export */ });
/* unused harmony exports parseResponse, parseResponseWithPaginate, parseTags */
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(600);
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(axios__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }


var Http = axios__WEBPACK_IMPORTED_MODULE_0___default().create({
  headers: {
    'X-CSRF-TOKEN': window.getCsrfToken(),
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  }
});

var client = /*#__PURE__*/function (_Http) {
  _inherits(client, _Http);

  var _super = _createSuper(client);

  function client() {
    _classCallCheck(this, client);

    return _super.apply(this, arguments);
  }

  return client;
}(Http);

var parseResponse = function parseResponse(response) {
  return {
    data: response.data.data // expecting object with ID

  };
},
    parseResponseWithPaginate = function parseResponseWithPaginate(response) {
  var data = response.data;
  return Object.assign({}, response, {
    data: data.data,
    // expecting array of objects with IDs
    pagination: data.pagination // expecting object with ID

  });
},
    parseTags = function parseTags(response) {
  var atagTypes = {};

  for (var i in response.data.data) {
    var atag = response.data.data[i];
    var type = atag.atag_type ? atag.atag_type : {
      id: 0,
      name: 'Autres',
      exclusive: false,
      order: 1000
    };
    if (!atagTypes[type.name]) atagTypes[type.name] = Object.assign({
      atags: []
    }, type);
    atagTypes[type.name].atags.push(atag);
  } // sort


  var keysSorted = Object.keys(atagTypes).sort(function (a, b) {
    return atagTypes[a].order - atagTypes[b].order;
  });
  var types = [];

  for (var _i in keysSorted) {
    types.push(atagTypes[keysSorted[_i]]);
  } // return tags


  return {
    data: types
  };
};



/***/ }),

/***/ 906:
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  "default": () => (/* binding */ ListItem)
});

;// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib/index.js??vue-loader-options!./vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue?vue&type=template&id=65b53f46&
var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("li", [
    _c(
      "div",
      {
        class: { bold: _vm.isFolder },
        on: { click: _vm.toggle, dblclick: _vm.changeType }
      },
      [
        _vm.model.id
          ? _c("div", { staticClass: "trois-pages-list-item-title" }, [
              _c("div", { staticClass: "trois-pages-list-openener" }, [
                _vm.isFolder
                  ? _c("span", [
                      _vm.open
                        ? _c("i", { staticClass: "material-icons" }, [
                            _vm._v("expand_more")
                          ])
                        : _c("i", { staticClass: "material-icons" }, [
                            _vm._v("chevron_right")
                          ])
                    ])
                  : _vm._e()
              ]),
              _vm._v(" "),
              _c("i", { staticClass: "material-icons" }, [
                _vm._v("description")
              ]),
              _vm._v(" " + _vm._s(_vm.model.title) + "\n    ")
            ])
          : _vm._e(),
        _vm._v(" "),
        _c("div", { staticClass: "trois-pages-list-item-action" }, [
          _vm.model.id
            ? _c(
                "a",
                {
                  attrs: {
                    href: _vm.url + "admin/pages/Pages/manage/" + _vm.model.id
                  }
                },
                [
                  _c("i", { staticClass: "material-icons" }, [
                    _vm._v("mode_edit")
                  ])
                ]
              )
            : _vm._e(),
          _vm._v(" "),
          _vm.model.id
            ? _c(
                "a",
                {
                  attrs: {
                    href: _vm.url + "admin/pages/Pages/edit/" + _vm.model.id
                  }
                },
                [
                  _c("i", { staticClass: "material-icons" }, [
                    _vm._v("info_outline")
                  ])
                ]
              )
            : _vm._e(),
          _vm._v(" "),
          _vm.model.id
            ? _c("form", {
                staticStyle: { display: "inline-block" },
                attrs: {
                  id: "form-" + _vm.model.id,
                  action: _vm.url + "admin/pages/Pages/delete/" + _vm.model.id,
                  method: "post"
                }
              })
            : _vm._e(),
          _vm._v(" "),
          _vm.model.id
            ? _c(
                "i",
                {
                  staticClass: "material-icons",
                  on: { click: _vm.deleteItem }
                },
                [_vm._v("delete_forever")]
              )
            : _vm._e()
        ])
      ]
    ),
    _vm._v(" "),
    _vm.isFolder
      ? _c(
          "ul",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: _vm.open,
                expression: "open"
              }
            ]
          },
          _vm._l(_vm.model.children, function(model) {
            return _c("pages-list-item", {
              key: model.id,
              staticClass: "trois-pages-list-item",
              attrs: { model: model, url: _vm.url }
            })
          }),
          1
        )
      : _vm._e()
  ])
}
var staticRenderFns = []
render._withStripped = true


;// CONCATENATED MODULE: ./vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue?vue&type=template&id=65b53f46&

// EXTERNAL MODULE: ./vendor/3xw/cakephp-pages/resources/assets/http/client.js
var client = __webpack_require__(768);
;// CONCATENATED MODULE: ./node_modules/babel-loader/lib/index.js??clonedRuleSet-1[0].rules[0].use!./node_modules/vue-loader/lib/index.js??vue-loader-options!./vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue?vue&type=script&lang=js&
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

/* harmony default export */ const ListItemvue_type_script_lang_js_ = ({
  name: 'pages-list-item',
  props: {
    model: Object,
    url: String
  },
  data: function data() {
    return {
      open: this.model.parent_id == undefined ? true : false
    };
  },
  computed: {
    isFolder: function isFolder() {
      return this.model.children && this.model.children.length;
    }
  },
  mounted: function mounted() {},
  methods: {
    deleteItem: function deleteItem() {
      if (confirm("Are you sure you want to delete '" + this.model.title + "' ?")) {
        document.getElementById('form-' + this.model.id).submit();
      }
    },
    toggle: function toggle() {
      if (this.isFolder) {
        this.open = !this.open;
      }
    },
    changeType: function changeType() {
      if (!this.isFolder) {
        Vue.set(this.model, 'children', []);
        this.addChild();
        this.open = true;
      }
    },
    addChild: function addChild() {
      this.model.children.push({
        title: 'new page'
      });
    }
    /*onDragEnd: function(evt){
      if(evt.oldIndex != evt.newIndex){
        this.swapChildren(evt.oldIndex, evt.newIndex);
      }
    },
    swapChildren: function(from, to)
    {
      var item = this.model.children.splice(from, 1 );
      this.model.children.splice((to < from)? to: to - 1, 0,  item[0]);
       // save
      client.post(this.url+'admin/pages/pages/order/'+item[0].id+'.json',
      {from:from,to:to,_csrfToken:window.getCsrfToken()},
      {headers:{"Accept":"application/json","Content-Type":"application/json"}})
      .then(this.editSuccessCallback, this.errorCallback);
    }*/

  }
});
;// CONCATENATED MODULE: ./vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue?vue&type=script&lang=js&
 /* harmony default export */ const components_ListItemvue_type_script_lang_js_ = (ListItemvue_type_script_lang_js_); 
// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js
var componentNormalizer = __webpack_require__(900);
;// CONCATENATED MODULE: ./vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue





/* normalize component */
;
var component = (0,componentNormalizer/* default */.Z)(
  components_ListItemvue_type_script_lang_js_,
  render,
  staticRenderFns,
  false,
  null,
  null,
  null
  
)

/* hot reload */
if (false) { var api; }
component.options.__file = "vendor/3xw/cakephp-pages/resources/assets/components/ListItem.vue"
/* harmony default export */ const ListItem = (component.exports);

/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,